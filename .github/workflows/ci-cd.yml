name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: smart-blogz-cluster
  NODE_VERSION: '20.x'
  NX_BRANCH: ${{ github.event.number || github.ref_name }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: smart-blogz
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install -g nx @nrwl/cli

      - name: Cache NX
        uses: actions/cache@v3
        with:
          path: node_modules/.cache/nx
          key: ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Build Frontend
        run: npx nx build blog-frontend --configuration=production

      - name: Generate Prisma Client
        run: npx prisma generate --schema ./apps/blog-app-backend/prisma/schema.prisma

      - name: Build Backend
        run: npx nx build blog-app-backend --configuration=production

      - name: Run Tests
        run: |
          npx nx test blog-frontend --configuration=ci
          npx nx test blog-app-backend --configuration=ci

      - name: Upload coverage reports
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage/apps/blog-frontend
            coverage/apps/blog-app-backend
          if-no-files-found: warn

  push-images:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./apps/blog-app-backend/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/smart-blogz-backend:${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/smart-blogz-backend:latest
          build-args: |
            NODE_ENV=production

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./apps/blog-frontend/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/smart-blogz-frontend:${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/smart-blogz-frontend:latest
          build-args: |
            NODE_ENV=production

  deploy:
    needs: push-images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init

      - name: Create terraform.tfvars
        run: |
          cd terraform
          cat > terraform.tfvars << EOF
          aws_region = "${{ env.AWS_REGION }}"
          environment = "production"
          database_password = "${{ secrets.DATABASE_PASSWORD }}"
          jwt_secret = "${{ secrets.JWT_SECRET }}"
          google_client_id = "${{ secrets.GOOGLE_CLIENT_ID }}"
          google_client_secret = "${{ secrets.GOOGLE_CLIENT_SECRET }}"
          facebook_app_id = "${{ secrets.FACEBOOK_APP_ID }}"
          facebook_app_secret = "${{ secrets.FACEBOOK_APP_SECRET }}"
          image_tag = "${{ github.sha }}"
          EOF

      - name: Apply Terraform
        run: |
          cd terraform
          terraform apply -auto-approve
